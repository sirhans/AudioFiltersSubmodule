//
//  BMCDBlepOscillator.h
//  AudioFiltersXcodeProject
//
//  This is a BLEP (Band-limited step) oscillator. It works by generating
//  waveforms using the naive method, then adding the step response of a
//  critically-damped lowpass filter to the output, positioned exactly at the
//  point of discontinuity. This has the effect of smoothing out the discontinuity
//  and gives a result that is equivalent to what we would have if the pure
//  waveform had been passed through a critically-damped lowpass filter before
//  sampling it.
//
//  Having an analytical expression for the lowpass filtered pure waveform gives
//  us a signal that responds well to oversampling so that moderate oversampling
//  is sufficient to produce an alias-free waveform.
//
//  We use a critically-damped lowpass filter because its impulse response can
//  be expressed using simple real-valued arithmetic so we do not need to
//  store it in a lookup table. Another advantage of this method is that the
//  filter impulse response is causal (it doesn't extend backwards in time) so
//  combining it with the samples generated by the naive waveform method doesn't
//  require delay or look-ahead.
//
//  Created by hans anderson on 11/26/20.
//  Copyright Â© 2020 BlueMangoo. We hereby release this file into the public
//  domain without restrictions.
//

#ifndef BMCDBlepOscillator_h
#define BMCDBlepOscillator_h

#include <stdio.h>
#include "BMGaussianUpsampler.h"
#include "BMDownsampler.h"
#include "BMMultiLevelBiquad.h"

#define BMCDBLEP_MAX_BLEPS 20
#define BMCDBLEP_MAX_FILTER_ORDER 20

typedef struct BMCDBlepOscillator {
	size_t numBleps, filterOrder, oversampleFactor, oldestBlep;
	float sampleRate, blepInputIncrement, nextStartPhase, previousEndValue;
	float blepInputInitialValue [BMCDBLEP_MAX_BLEPS];
    size_t blepInputWriteOffset [BMCDBLEP_MAX_BLEPS];
	float *blepInputBuffers [BMCDBLEP_MAX_BLEPS];
	float stepResponseCoefficients [BMCDBLEP_MAX_FILTER_ORDER];
	float *archetypeWavelengths;
    float *b1, *b2, *b3;
    size_t *b4;
	BMGaussianUpsampler upsampler;
	BMDownsampler downsampler;
	BMMultiLevelBiquad highpass;
} BMCDBlepOscillator;


/*!
 *BMCDBlepOscillator_init
 */
void BMCDBlepOscillator_init(BMCDBlepOscillator *This, size_t numBleps, size_t filterOrder, size_t oversampleFactor, float sampleRate);

/*!
 *BMCDBlepOscillator_free
 */
void BMCDBlepOscillator_free(BMCDBlepOscillator *This);


/*!
 *BMCDBlepOscillator_process
 */
void BMCDBlepOscillator_process(BMCDBlepOscillator *This, const float *frequencies, float *output, size_t numSamples);



#endif /* BMCDBlepOscillator_h */
